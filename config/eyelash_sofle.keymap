#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

&soft_off { hold-time-ms = <2000>; };

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    behaviors {
    };

    combos {
        compatible = "zmk,combos";

        softoff {
            bindings = <&soft_off>;
            key-positions = <14 28 40>;
        };

        mac_layer {
            bindings = <&tog 5>;
            key-positions = <11 12>;
        };

        bt_rgb_sticky_layer {
            bindings = <&sl 4>;
            key-positions = <50 51>;
        };

        game_mode {
            bindings = <&tog 7>;
            key-positions = <37 38>;
        };
    };

    macros {
        os_copy: os_copy {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none>;
            label = "OS_COPY";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer0 {
            bindings = <
&kp GRAVE              &kp N1       &kp N2     &kp N3        &kp N4         &kp N5    &msc SCRL_UP     &kp N6           &kp N7     &kp N8     &kp N9        &kp N0                  &kp LEFT_GUI
&kp TAB                &kp Q        &kp W      &kp E         &kp R          &kp T     &msc SCRL_DOWN   &kp Y            &kp U      &kp I      &kp O         &kp P                   &kp BACKSLASH
&mt LEFT_GUI CAPSLOCK  &kp A        &kp S      &kp D         &lt 6 F        &kp G     &msc SCRL_LEFT   &kp H            &kp J      &kp K      &kp L         &kp SEMI                &mt LEFT_ALT APOS
&kp LSHFT              &mt LCTRL Z  &kp X      &kp C         &kp V          &kp B     &msc SCRL_RIGHT  &kp N            &kp M      &kp COMMA  &kp DOT       &mt RIGHT_CONTROL FSLH  &kp RIGHT_SHIFT
&kp C_MUTE             &kp LEFT     &kp RIGHT  &kp LEFT_ALT  &kp BACKSPACE  &sl 1     &kp C_MUTE       &mt RSHFT ENTER  &kp SPACE  &mo 3      &kp UP_ARROW  &kp DOWN_ARROW
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "LAYER0";
        };

        raise {
            bindings = <
&trans      &kp F1            &kp F2             &kp F3                &kp F4                 &kp F5       &kp C_BRIGHTNESS_INC  &kp F6           &kp F7          &kp F8        &kp F9        &kp F10           &kp F11
&trans      &trans            &trans             &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &trans       &kp C_BRIGHTNESS_DEC  &trans           &trans          &trans        &trans        &trans            &kp F12
&kp ESCAPE  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp EQUAL    &kp C_VOLUME_DOWN     &kp MINUS        &sk LEFT_SHIFT  &sk LEFT_GUI  &sk LEFT_ALT  &sk LEFT_CONTROL  &trans
&trans      &kp LC(Z)         &kp LC(X)          &kp LC(C)             &kp LC(V)              &trans       &kp C_VOLUME_UP       &trans           &trans          &trans        &trans        &trans            &trans
&trans      &trans            &trans             &trans                &trans                 &trans       &trans                &kp RIGHT_SHIFT  &trans          &trans        &trans        &trans
            >;
        };

        mac_raise {
            bindings = <
&trans  &trans     &trans     &trans     &trans     &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans     &trans     &trans     &trans     &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans     &trans     &trans     &trans     &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LG(Z)  &kp LG(X)  &kp LG(C)  &kp LG(V)  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans     &trans     &trans     &trans     &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        navi {
            bindings = <
&trans    &trans     &trans    &trans     &trans   &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans    &kp PG_UP  &kp UP    &kp PG_DN  &trans   &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&kp HOME  &kp LEFT   &kp DOWN  &kp RIGHT  &kp END  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans    &trans     &trans    &trans     &trans   &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans    &trans     &trans    &trans     &trans   &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        bt_rgb {
            bindings = <
&trans  &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &rgb_ug RGB_BRI  &trans  &trans  &trans           &trans           &trans  &soft_off
&trans  &bt BT_CLR    &bt BT_CLR_ALL  &trans        &trans        &trans          &rgb_ug RGB_BRD  &trans  &trans  &rgb_ug RGB_SPD  &rgb_ug RGB_SPI  &trans  &trans
&trans  &out OUT_USB  &out OUT_BLE    &trans        &trans        &trans          &rgb_ug RGB_HUD  &trans  &trans  &rgb_ug RGB_EFR  &rgb_ug RGB_EFF  &trans  &trans
&trans  &sys_reset    &trans          &trans        &trans        &bootloader     &rgb_ug RGB_HUI  &trans  &trans  &trans           &trans           &trans  &trans
&trans  &trans        &trans          &trans        &trans        &trans          &rgb_ug RGB_TOG  &trans  &trans  &trans           &trans           &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        mac_mode {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        aero_navi {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans         &trans           &trans       &trans         &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp LA(EQUAL)  &kp LS(LC(TAB))  &kp LC(TAB)  &kp LA(MINUS)  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp LA(H)      &kp LA(J)        &kp LA(K)    &kp LA(L)      &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans         &trans           &trans       &trans         &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans         &trans           &trans       &trans         &trans
            >;
        };

        swap_bkspc_spc {
            bindings = <
&trans  &trans  &trans  &trans  &trans     &trans    &trans  &trans  &trans         &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans     &trans    &trans  &trans  &trans         &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans     &trans    &trans  &trans  &trans         &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans     &trans    &trans  &trans  &trans         &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &kp SPACE  &trans    &trans  &trans  &kp BACKSPACE  &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        enable_mac_raise {
            if-layers = <5 1>;
            then-layer = <2>;
        };
    };
};
